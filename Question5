import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Stack;

public class Question5 {


 

  public static boolean findPath(int nodeIdx1, int nodeIdx2) {
    // write implementation here
  GraphNode g = new GraphNode();
    return reachable(g, nodeIdx1, nodeIdx2) || reachable(g, nodeIdx2, nodeIdx1);
  }


  private boolean reachable(DirectedGraph g, int from, int to) {
    boolean[] visited = new boolean[g.V()];
    Stack<Integer> stack = new Stack<Integer>();
    stack.push(from);
    
    while (!stack.isEmpty()) {
      int cur = stack.pop();
      visited[cur] = true;
      Iterator<Integer> neighbors = g.adj(cur).iterator();
      while (neighbors.hasNext()) {
        int neighbor = neighbors.next();
        if (!visited[neighbor]) {
          if (neighbor == to) {
            return true;
          }
          stack.push(neighbor);
        }
      }
    }


    return false;
  }


}
